# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch and riscv
on:
  push:
    branches: [ master, riscv]
  pull_request:
    branches: [ master, riscv]
  release:
    branches: [ master, riscv]

jobs:
  build:
    runs-on: ubuntu-latest
    needs: build-toolchains

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
        

      - name: Download the x86_64-onyx-linux toolchain
        uses: actions/download-artifact@v2.0.8
        with:
          # Artifact name
          name: x86_64-onyx-linux

      - name: Extract Toolchain
        run: |
          zstd -d x86_64-onyx-linux.tar.zst --stdout | tar x
          echo "$PWD/x86_64-onyx/bin" >> $GITHUB_PATH
  
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install mtools genisoimage libfl2 clang-tidy unzip ninja-build
          mkdir gn_bin/
          cd gn_bin
          wget -q https://chrome-infra-packages.appspot.com/dl/gn/gn/linux-amd64/+/latest -O gn.zip
          unzip gn.zip
          echo "$PWD" >> $GITHUB_PATH
          cd ..

      # Runs a set of commands using the runners shell
      - name: Build Onyx
        run: |
          cp kernel/kernel.config.example kernel/kernel.config
          export SYSROOT=$PWD/sysroot
          export ONYX_ARCH=x86_64
          ./scripts/setup_build.sh
          RUN_CLANG_TIDY=0 make -j $(nproc) iso

      - name: Upload a Build Artifact(Onyx.iso)
        uses: actions/upload-artifact@v2.1.4
        with:
          name: Onyx ISO
          path: Onyx.iso

      - name: Upload a Build Artifact(kernel/vmonyx)
        uses: actions/upload-artifact@v2.1.4
        with:
          name: vmonyx
          path: kernel/vmonyx

      - name: Upload a Build Artifact(sysroot)
        uses: actions/upload-artifact@v2.1.4
        with:
          name: Sysroot
          path: sysroot/
  
  build-llvm:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: build-toolchains
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
        

      # Runs a single command using the runners shell
      - name: Download the onyx-llvm-linux toolchain
        uses: actions/download-artifact@v2.0.8
        with:
          # Artifact name
          name: onyx-llvm-linux

      - name: Extract Toolchain
        run: |
          zstd -d onyx-llvm-linux.tar.zst --stdout | tar x
  
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install mtools genisoimage libfl2 clang-tidy unzip ninja-build
          mkdir gn_bin/
          cd gn_bin
          wget -q https://chrome-infra-packages.appspot.com/dl/gn/gn/linux-amd64/+/latest -O gn.zip
          unzip gn.zip
          echo "$PWD" >> $GITHUB_PATH
          cd ..

      # Runs a set of commands using the runners shell
      - name: Build Onyx
        run: |
          cp kernel/kernel.config.example kernel/kernel.config
          export CLANG_PATH=$PWD/onyx-llvm
          export SYSROOT=$PWD/sysroot
          export ONYX_ARCH=x86_64
          ./scripts/setup_build.sh
          RUN_CLANG_TIDY=0 make -j $(nproc) iso

      - name: Upload a Build Artifact(Onyx.iso)
        uses: actions/upload-artifact@v2.1.4
        with:
          name: Onyx-iso-llvm
          path: Onyx.iso

      - name: Upload a Build Artifact(kernel/vmonyx)
        uses: actions/upload-artifact@v2.1.4
        with:
          name: vmonyx-llvm
          path: kernel/vmonyx

      - name: Upload a Build Artifact(sysroot-llvm)
        uses: actions/upload-artifact@v2.1.4
        with:
          name: Sysroot-llvm
          path: sysroot/
  
  # Builds a minimal sysroot, with headers and the libc. Supposed to be used when building a toolchain.
  # In this case, we limit ourselves to building a stage 1 GNU toolchain since LLVM is far slower to build,
  # and I'm not sure if it even supports building without a sysroot.
  build-minimal-sysroots:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        target_arch: [x86_64, riscv64]
  
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Cache (GNU toolchain)
        id: toolchain-cache-gnu
        uses: actions/cache@v2.1.4
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: toolchain_binaries-gnu-stage1/
          # An explicit key for restoring and saving the cache
          key: ${{ matrix.target_arch }}-toolchain-${{ hashFiles('toolchains/binutils-2.37.patch', 'toolchains/gcc-11.2.0.patch',
                'toolchains/scripts/build_toolchain.sh') }}

      - name: Setup environment
        run: |
          scripts/ci/install_github_ci_deps.sh

          echo "$PWD/gn_bin" >> $GITHUB_PATH
          echo "$PWD/toolchain_binaries-gnu-stage1/bin" >> $GITHUB_PATH

          if [ "$RUNNER_OS" = "macOS" ]; then
            echo "/usr/local/opt/gnu-getopt/bin:$(brew --prefix)/opt/coreutils/libexec/gnubin:$(brew --prefix)/opt/make/libexec/gnubin" >> $GITHUB_PATH
          fi

      - name: Build toolchain
        if: steps.toolchain-cache-gnu.outputs.cache-hit != 'true'
        run: |
          export SYSROOT=$PWD/sysroot
          export ONYX_ARCH=${{ matrix.target_arch }}
          mkdir toolchain_binaries-gnu-stage1
          ./toolchains/scripts/build_toolchain.sh --no-libc toolchain_build toolchain_binaries-gnu-stage1 \
          -a ${{ matrix.target_arch }}

      - name: Build sysroot
        run: |
          export ONYX_ARCH=${{ matrix.target_arch }}
          cp kernel/kernel.config.example kernel/kernel.config
          ./scripts/setup_build.sh
          make install-headers -j $(nproc)
          ./scripts/build_libc_for_toolchain.sh
          tar cvf minimal-sysroot-${{ matrix.target_arch }}.tar sysroot/
          zstd -T0 -15 minimal-sysroot-${{ matrix.target_arch }}.tar

      - name: Upload the minimal sysroot
        uses: actions/upload-artifact@v2.1.4
        with:
          name: minimal-sysroot-${{ matrix.target_arch }}
          path: minimal-sysroot-${{ matrix.target_arch }}.tar.zst


  build-toolchains:
    runs-on: ${{ matrix.os }}
    needs: build-minimal-sysroots

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-18.04, macos-latest]
        target_arch: [x86_64, riscv64]
        toolchain: [gnu, llvm]
        exclude:
          # macOS can't build LLVM just yet
          - os: macos-latest
            toolchain: llvm
          # LLVM should build for all targets, since it's a cross compiler by nature, but right now, it doesn't do that.
          # In fact, there's no onyx llvm port for riscv64 right now.
          - target_arch: riscv64
            toolchain: llvm
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
      
      - name: Download the minimal sysroot
        uses: actions/download-artifact@v2.0.8
        with:
          # Artifact name
          name: minimal-sysroot-${{ matrix.target_arch}}

      - name: Extract minimal sysroot
        run: |
          zstd -d minimal-sysroot-${{ matrix.target_arch}}.tar.zst --stdout | tar x
      
      - run: |
          # Add a modifier to ubuntu 18.04 LTS    
          if [ "${{ matrix.os }}" = "ubuntu-18.04" ]; then
            os_name_modifier="-ubuntu-18.04"
          fi

          case "${{ runner.os }}" in
          Linux)
            os_name="linux$os_name_modifier"
            ;;
          macOS)
            os_name="macos"
            ;;
          esac

          case "${{ matrix.toolchain }}" in
          gnu)
            toolchain_id_no_os="${{ matrix.target_arch }}-onyx"
            ;;
          llvm)
            toolchain_id_no_os="onyx-llvm"
            ;;
          esac

          echo "os_name=$os_name" >> $GITHUB_ENV
          echo "toolchain_id_no_os=$toolchain_id_no_os" >> $GITHUB_ENV
          echo "toolchain_id=${toolchain_id_no_os}-${os_name}" >> $GITHUB_ENV
          echo "cache-version=\"-v2\"" >> $GITHUB_ENV  # Used to invalidate previous caches, when needed.


      - name: Cache (GNU toolchain)
        if: matrix.toolchain == 'gnu'
        id: toolchain-cache-gnu
        uses: actions/cache@v2.1.4
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: toolchain_binaries-gnu/
          # An explicit key for restoring and saving the cache
          key: ${{ matrix.target_arch }}-toolchain-${{ matrix.os }}${{ env.cache-version }}-${{ hashFiles('toolchains/binutils-2.37.patch',
                'toolchains/gcc-11.2.0.patch', 'toolchains/scripts/build_toolchain.sh') }}
      
      - name: Cache (LLVM toolchain)
        if: matrix.toolchain == 'llvm'
        id: toolchain-cache-llvm
        uses: actions/cache@v2.1.4
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: toolchain_binaries-llvm/
          # An explicit key for restoring and saving the cache
          key: ${{ matrix.target_arch }}-toolchain-${{ matrix.os }}${{ env.cache-version }}-${{ hashFiles('toolchains/llvm-project-12.0.0.patch',
                'toolchains/scripts/build_toolchain.sh') }}
  
      - name: Build toolchain
        if: (steps.toolchain-cache-gnu.outputs.cache-hit != 'true' && matrix.toolchain == 'gnu') ||
            (steps.toolchain-cache-llvm.outputs.cache-hit != 'true' && matrix.toolchain == 'llvm')
        run: |
          scripts/ci/install_github_ci_deps.sh
          cp kernel/kernel.config.example kernel/kernel.config
          export PATH="$PATH:$PWD/gn_bin"
          echo "$PWD/gn_bin" >> $GITHUB_PATH

          if [ "$RUNNER_OS" = "macOS" ]; then
            export PATH="/usr/local/opt/gnu-getopt/bin:$(brew --prefix)/opt/coreutils/libexec/gnubin:$(brew --prefix)/opt/make/libexec/gnubin:$PATH"
          fi

          export SYSROOT=$PWD/sysroot
          export ONYX_ARCH=${{ matrix.target_arch }}
          ./scripts/setup_build.sh
          mkdir toolchain_binaries-${{ matrix.toolchain }}
          if ! ./toolchains/scripts/build_toolchain.sh toolchain_build toolchain_binaries-${{ matrix.toolchain }} \
            -a ${{ matrix.target_arch }} --toolchain=${{ matrix.toolchain }}; then
            rm -rf toolchain_binaries-${{ matrix.toolchain }}
            exit 1
          fi

      - name: Compress toolchain
        run: |
          mv toolchain_binaries-${{ matrix.toolchain }} ${{ env.toolchain_id_no_os }}
          tar cvf ${{ env.toolchain_id }}.tar ${{ env.toolchain_id_no_os }}
          zstd -T0 -13 ${{ env.toolchain_id }}.tar -o ${{ env.toolchain_id }}.tar.zst
          # We move the binaries back to toolchain_binaries-${{ matrix.toolchain }} due to the cache we previously set up
          mv ${{ env.toolchain_id_no_os }} toolchain_binaries-${{ matrix.toolchain }}

      - name: Upload the toolchain
        uses: actions/upload-artifact@v2.1.4
        with:
          name: ${{ env.toolchain_id }}
          path: ${{ env.toolchain_id }}.tar.zst
